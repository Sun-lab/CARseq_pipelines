
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>   
> # ----------------------------------------------------------------------
> # SVA: Calculate surrogate variables
> # ----------------------------------------------------------------------
> 
> rm(list=ls())
> 
> repo_dir = ".."
> cmc_dir  = ".."
> 
> # ----------------------------------------------------------------------
> # Library/Source Basic Functions
> # ----------------------------------------------------------------------
> 
> source(file.path(repo_dir,"R","base_functions_plittle.R"))
> library(data.table)
> library(sva)
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-29. For overview type 'help("mgcv-package")'.
Loading required package: genefilter
Loading required package: BiocParallel
> library(matrixStats)

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:genefilter’:

    rowSds, rowVars

> 
> # ----------------------------------------------------------------------
> # read in gene expression and covariate data
> # ----------------------------------------------------------------------
> 
> trec = readRDS(file=file.path(cmc_dir, "data/trec_filtered_log_rd_corrected.rds"))
> dim(trec)
[1] 20788   582
> trec[1:2,1:5]
                MSSM_RNA_BP_PFC_10 MSSM_RNA_BP_PFC_11 MSSM_RNA_BP_PFC_12
ENSG00000000003         -0.7690079         -0.5827739         -0.7562327
ENSG00000000419         -0.2143324         -0.2701620         -0.1527177
                MSSM_RNA_BP_PFC_13 MSSM_RNA_BP_PFC_14
ENSG00000000003         -0.6970610        -0.66223542
ENSG00000000419         -0.2115554        -0.04881745
> 
> dat = readRDS(file=file.path(cmc_dir, "data/dat_cavariates.rds"))
> dim(dat)
[1] 582  62
> dat[1:2,]
  Individual_ID   RNAseq_sample_id ATACSeq.Assay_Sample_ID Genotype_sample_id
1  CMC_MSSM_002 MSSM_RNA_BP_PFC_10                    <NA>         MSSM_BP_10
2  CMC_MSSM_003 MSSM_RNA_BP_PFC_11                   B16T1         MSSM_BP_11
  Individual.Notes Institution Dx SCZ.Pair BP.Pair gender Sex Ethnicity
1             <NA>        MSSM BP     <NA>    <NA>   Male  XY Caucasian
2             <NA>        MSSM BP     <NA>    <NA>   Male  XY Caucasian
  brain_weight  PMI   pH autopsy_year age_death cause_death   height weight
1         1398 22.3 6.03         2004        42           1 68.00004    225
2         1518 19.5 6.45         2004        58           3       NA     NA
  Study Brain_Region Brodmann_Area Hemisphere Operator Date_Dissected
1   CMC        DLPFC            46       <NA>     <NA>           <NA>
2   CMC        DLPFC            46       <NA>     <NA>           <NA>
  RNA_Isolation_Batch RNA_Prep_Date RIN X28S.18S RNA_Prep_Operator
1                1_52       8/26/13 6.9      1.2  Silvia De rubeis
2                1_49       8/23/13 7.0      1.2  Silvia De rubeis
  Total_RNA_Yield X260.280 Ribozero_Batch Library_Batch Library_Barcode
1             7.5     2.09         1_26_1          1_26          GATCAG
2            16.7     1.90         1_24_2          1_24          TAGCTT
  Flowcell_Batch Flowcell_.Given_to_Core. Flowcell_2 Flowcell_Name
1           1_62                       16         NA        Hal 73
2           1_56                       14         NA        Sid 33
  Flowcell_Name_2 Flowcell_Lane_A Flowcell_Lane_B Flowcell_ID Total_Reads
1            <NA>               5               8   C2GV3ACXX    71571358
2            <NA>               4               6   C2G1PACXX    92807414
  Mapped_Reads Genes_Detected Transcripts_Detected Percent_Aligned
1     70222780          28669               149183       0.9811576
2     91351931          30537               156004       0.9843172
  Intragenic_Rate Intronic_Rate Intergenic_Rate Expression_Profiling_Efficiency
1       0.9263974     0.5088163      0.07278100                       0.4097129
2       0.9340911     0.3310531      0.06457128                       0.5935806
     rRNA_Rate libclust  RIN2     genoPC1      genoPC2      genoPC3     genoPC4
1 0.0001817627        E 47.61 -0.02018926  0.001054022 -0.009359794 -0.03120803
2 0.0003452849        E 49.00 -0.02151339 -0.036625735 -0.008668278  0.01932706
      genoPC5 log_depth
1 -0.02284095  6.415097
2  0.03857604  6.898715
> 
> CMC_count = readRDS("../data/trec_filtered_scz_control.rds")  # 20788x527 matrix
> dim(CMC_count)
[1] 20788   527
> CMC_count[1:2,1:5]
                MSSM_RNA_PFC_1 MSSM_RNA_PFC_10 MSSM_RNA_PFC_100
ENSG00000000003            137             320              251
ENSG00000000419            416            1242              625
                MSSM_RNA_PFC_101 MSSM_RNA_PFC_102
ENSG00000000003              101              209
ENSG00000000419              366              701
> 
> table(dat$Brain_Region)

DLPFC 
  582 
> table(dat$Dx)

    AFF      BP Control     SCZ 
      8      47     277     250 
> 
> table(dat$RNAseq_sample_id == colnames(trec))

TRUE 
 582 
> 
> w2kp = which(dat$Dx %in% c("Control", "SCZ"))
> length(w2kp)
[1] 527
> 
> dat = dat[w2kp,]
> trec = trec[,w2kp]
> 
> dim(dat)
[1] 527  62
> dat[1:2,1:5]
   Individual_ID RNAseq_sample_id ATACSeq.Assay_Sample_ID Genotype_sample_id
21  CMC_MSSM_025   MSSM_RNA_PFC_1                  B223T1             MSSM_1
22  CMC_MSSM_026  MSSM_RNA_PFC_10                   B15T1            MSSM_10
   Individual.Notes
21             <NA>
22             <NA>
> 
> dim(trec)
[1] 20788   527
> trec[1:2,1:5]
                MSSM_RNA_PFC_1 MSSM_RNA_PFC_10 MSSM_RNA_PFC_100
ENSG00000000003     -0.6440245     -0.55991408       -0.6470413
ENSG00000000419     -0.1637675      0.02805202       -0.2518675
                MSSM_RNA_PFC_101 MSSM_RNA_PFC_102
ENSG00000000003       -0.7356928      -0.54891562
ENSG00000000419       -0.1796269      -0.02479781
> 
> # ----------------------------------------------------------------------
> # generate cell type proportions
> # ----------------------------------------------------------------------
> 
> # fetch gene names
> # obtain gene length from gtf (used in bulk expression quantification):
> # NOTE: the actual genelength_file was generated using 56,632 genes, while we only need a subset of 20,788 genes now.
> input_folder = "../data"
> data_folder = "../data"
> gencode_file = file.path(input_folder, "Homo_sapiens.GRCh37.70.processed.gtf.gz")
> genelength_file = file.path(input_folder, "ExonicGeneLengths_GRCh37_70.RData")
> txdb_file = file.path(input_folder, "Homo_sapiens_ensembl_70_GRCh37.sqlite")
> gtf_link = "Homo_sapiens.GRCh37.70.processed.gtf"
> library(GenomicFeatures)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:data.table’:

    first, second

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following object is masked from ‘package:nlme’:

    collapse

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

> if( !file.exists(genelength_file) ){
+   if( !file.exists(txdb_file) ){
+     # prepare txdb
+     exdb = GenomicFeatures::makeTxDbFromGFF(file = gencode_file,
+                                             format="gtf", dataSource = gtf_link)
+   } else {
+     exdb = AnnotationDbi::loadDb(txdb_file)
+   }
+   exons.list.per.gene = GenomicFeatures::exonsBy(exdb,by="gene")
+   exonic_gene_sizes = lapply(exons.list.per.gene, function(x){sum(width(reduce(x)))})
+   
+   # We also need to extract other information from gtf files since they are not included in txdb:
+   gencode_gtf = rtracklayer::import(gencode_file)
+   gencode_gtf = gencode_gtf[!duplicated(gencode_gtf$gene_id), ]
+   gencode_gtf = gencode_gtf[match(rownames(trec), gencode_gtf$gene_id),
+                             c("gene_id", "source", "gene_biotype", "gene_name")]
+   gencode_gtf$gene_length = as.numeric(exonic_gene_sizes)
+   
+   save(file = genelength_file, exonic_gene_sizes, gencode_gtf)
+ } else {
+   load(genelength_file)
+   gencode_gtf = gencode_gtf[match(rownames(trec), gencode_gtf$gene_id),
+                             c("gene_id", "source", "gene_biotype", "gene_name", "gene_length")]
+ }
> 
> # Calculate TPM
> # indices: gene indices (or names matching rownames(count)) to use to scale 
> #          so that the sum of TPM among them is 1 million.
> calculate_TPM = function(count, gene_length, indices) {
+   if (nrow(count) != length(gene_length)) stop("Number of rows of the count matrix does not match gene lengths!")
+   TPM = count / gene_length
+   t(t(TPM)*1e6/colSums(TPM[indices, ]))
+ }
> 
> cell_sizes = readRDS("../MTG/cell_sizes_MTG.rds")
> 
> # read the signature matrix and prepare the CIBERSORT input
> signature_matrix_file = "../MTG/signature_MTG.rds"
> signature_matrix = readRDS(signature_matrix_file)$SIG
> signature_gene_file = file.path(data_folder, "CIBERSORT_input_signature_gene_SCZ.txt")
> mixture_file = file.path(data_folder, "CIBERSORT_input_observed_TPM_SCZ.txt")
> # prepare CIBERSORT input
> gene_name_match = pmatch(row.names(signature_matrix), gencode_gtf$gene_name)
> stopifnot(length(unique(na.omit(gene_name_match))) == length(na.omit(gene_name_match)))
> # use the subset of matched genes
> signature_matrix = signature_matrix[!is.na(gene_name_match), ]
> 
> # requires some rescaling to work properly
> # To get proper scaling, we need to obtain a matrix of reference expression
> # across all the genes, normalize to TPM for the 15k genes, and then
> # take a subset restricted to the signature genes.
> # The mixture expression in TPM also needs to be prepared in the same fashion.
> signature_gene_names = rownames(signature_matrix)
> length(signature_gene_names)
[1] 679
> signature_gene_names = intersect(signature_gene_names, gencode_gtf$gene_name)
> reference_expression = readRDS("../MTG/all_genes_MTG.rds")
> reference_TPM = calculate_TPM(reference_expression$SIG, reference_expression$anno$gene_length, cell_sizes$gene_names)
> SCZ_TPM = calculate_TPM(CMC_count, gencode_gtf$gene_length, match(cell_sizes$gene_names, gencode_gtf$gene_name))
> signature_matrix_scaled = reference_TPM[signature_gene_names, ]
> mixture_TPM_scaled = SCZ_TPM[match(signature_gene_names, gencode_gtf$gene_name), ]
> rownames(mixture_TPM_scaled) = signature_gene_names
> geneSymbol_and_observed_TPM = cbind(signature_gene_names, mixture_TPM_scaled)
> colnames(geneSymbol_and_observed_TPM)[1] = "geneSymbol"
> geneSymbol_and_signature_gene_TPM = cbind(signature_gene_names, signature_matrix_scaled)
> colnames(geneSymbol_and_signature_gene_TPM)[1] = "geneSymbol"
> # generate matrices as input for CIBERSORT online
> write.table(geneSymbol_and_observed_TPM,
+             file = mixture_file,
+             quote = FALSE,
+             row.names = FALSE,
+             sep="\t")
> write.table(geneSymbol_and_signature_gene_TPM,
+             file = signature_gene_file,
+             quote = FALSE,
+             row.names = FALSE,
+             sep="\t")
> 
> # run CIBERSORT
> # https://cibersort.stanford.edu/runcibersort.php
> cibersort_output_file = file.path(data_folder, "SCZ_CIBERSORT.Output.csv")
> cibersort_output = read.csv(cibersort_output_file)
> 
> # run ICeDT
> signature_matrix = as.matrix(signature_matrix)
> icedt_output_file =  file.path(data_folder, "SCZ_ICeDT_output.rds")
> if (!file.exists(icedt_output_file)) {
+   set.seed(1234)
+   icedt_output = ICeDT::ICeDT(
+     Y = mixture_TPM_scaled,
+     Z = as.matrix(signature_matrix_scaled),
+     tumorPurity = rep(0, ncol(mixture_TPM_scaled)),
+     refVar = NULL)
+   # save to ICeDT cellular frequency RDS file
+   saveRDS(icedt_output, icedt_output_file)
+ } else {
+   icedt_output = readRDS(icedt_output_file)
+ }
> 
> cell_sizes = readRDS("../MTG/cell_sizes_MTG.rds")
> cell_sizes = cell_sizes$cell_sizes[c("Astro", "Exc", "Inh", "Micro", "Oligo", "OPC")]
> icedt_rho = t(apply(t(icedt_output$rho)[,c("Astro", "Exc", "Inh", "Micro", "Oligo", "OPC")],1,function(xx){yy = xx / cell_sizes; yy / sum(yy)}))
> cibersort_rho = t(apply(cibersort_output[,c("Astro", "Exc", "Inh", "Micro", "Oligo", "OPC")],1,function(xx){yy = xx / cell_sizes; yy / sum(yy)}))
> rownames(icedt_rho) = rownames(cibersort_rho) = rownames(cibersort_output) = rownames(t(icedt_output$rho))
> prop_output_file = file.path(data_folder, "SCZ_prop.rds")
> prop_list = list(ICeDT=icedt_rho, CIBERSORT=cibersort_rho)
> saveRDS(prop_list, file=prop_output_file)
> prop_from_TPM_output_file = file.path(data_folder, "SCZ_prop_from_TPM.rds")
> prop_from_TPM_list = list(ICeDT=t(icedt_output$rho)[,c("Astro", "Exc", "Inh", "Micro", "Oligo", "OPC")],
+                           CIBERSORT=cibersort_output[,c("Astro", "Exc", "Inh", "Micro", "Oligo", "OPC")])
> saveRDS(prop_from_TPM_list, file=prop_from_TPM_output_file)
> 
> # load the cell fraction estimates and use ICeDT results
> prop = readRDS(prop_output_file)
> names(prop)
[1] "ICeDT"     "CIBERSORT"
> prop = prop$ICeDT
> dim(prop); head(prop)
[1] 527   6
                     Astro       Exc        Inh      Micro      Oligo
MSSM_RNA_PFC_1   0.1514417 0.4325437 0.08662203 0.02722698 0.23731890
MSSM_RNA_PFC_10  0.1366660 0.5098181 0.12945229 0.02044615 0.16165283
MSSM_RNA_PFC_100 0.1542522 0.4655221 0.07275588 0.03163516 0.21020361
MSSM_RNA_PFC_101 0.1574146 0.5687275 0.13099626 0.02177264 0.08034102
MSSM_RNA_PFC_102 0.1288827 0.5382473 0.08247101 0.02083806 0.17724991
MSSM_RNA_PFC_106 0.1277373 0.5070262 0.07556085 0.01590439 0.22224972
                        OPC
MSSM_RNA_PFC_1   0.06484674
MSSM_RNA_PFC_10  0.04196468
MSSM_RNA_PFC_100 0.06563099
MSSM_RNA_PFC_101 0.04074794
MSSM_RNA_PFC_102 0.05231099
MSSM_RNA_PFC_106 0.05152151
> 
> table(dat$RNAseq_sample_id %in% rownames(prop))

TRUE 
 527 
> 
> prop = prop[match(dat$RNAseq_sample_id, rownames(prop)),]
> dim(prop); head(prop)
[1] 527   6
                     Astro       Exc        Inh      Micro      Oligo
MSSM_RNA_PFC_1   0.1514417 0.4325437 0.08662203 0.02722698 0.23731890
MSSM_RNA_PFC_10  0.1366660 0.5098181 0.12945229 0.02044615 0.16165283
MSSM_RNA_PFC_100 0.1542522 0.4655221 0.07275588 0.03163516 0.21020361
MSSM_RNA_PFC_101 0.1574146 0.5687275 0.13099626 0.02177264 0.08034102
MSSM_RNA_PFC_102 0.1288827 0.5382473 0.08247101 0.02083806 0.17724991
MSSM_RNA_PFC_106 0.1277373 0.5070262 0.07556085 0.01590439 0.22224972
                        OPC
MSSM_RNA_PFC_1   0.06484674
MSSM_RNA_PFC_10  0.04196468
MSSM_RNA_PFC_100 0.06563099
MSSM_RNA_PFC_101 0.04074794
MSSM_RNA_PFC_102 0.05231099
MSSM_RNA_PFC_106 0.05152151
> 
> # ----------------------------------------------------------------------
> # first run PCA on residuals to help determin the number of PCs to use
> # ----------------------------------------------------------------------
> 
> ctypes2use = which(colnames(prop) != "Exc")
> plog = log(prop[,ctypes2use] + 1e-5)
> plog = plog - log(prop[,which(colnames(prop) == "Exc")])
> colnames(plog) = paste("log", colnames(plog), sep="_")
> dat = cbind(dat, plog)
> dim(dat)
[1] 527  67
> dat[1:2,]
   Individual_ID RNAseq_sample_id ATACSeq.Assay_Sample_ID Genotype_sample_id
21  CMC_MSSM_025   MSSM_RNA_PFC_1                  B223T1             MSSM_1
22  CMC_MSSM_026  MSSM_RNA_PFC_10                   B15T1            MSSM_10
   Individual.Notes Institution      Dx SCZ.Pair BP.Pair gender Sex Ethnicity
21             <NA>        MSSM     SCZ     <NA>    <NA>   Male  XY Caucasian
22             <NA>        MSSM Control     <NA>    <NA>   Male  XY  Hispanic
   brain_weight  PMI   pH autopsy_year age_death cause_death   height weight
21         1216  8.9 6.27         2002        68           1       NA     NA
22         1238 12.3 6.74         2003        58           1 65.00004    163
   Study Brain_Region Brodmann_Area Hemisphere Operator Date_Dissected
21   CMC        DLPFC             9       left   MS. LI         8/1/12
22   CMC        DLPFC             9       left   MS. LI         8/1/12
   RNA_Isolation_Batch RNA_Prep_Date RIN X28S.18S RNA_Prep_Operator
21                1_34       5/28/13 7.5      1.1   Jessica Johnson
22                1_13       4/29/13 8.8      2.7   Jessica Johnson
   Total_RNA_Yield X260.280 Ribozero_Batch Library_Batch Library_Barcode
21            10.7     2.10         1_12_2          1_12          CTAGCT
22            16.2     1.88          1_6_1           1_6          TGACCA
   Flowcell_Batch Flowcell_.Given_to_Core. Flowcell_2 Flowcell_Name
21           1_28                        7         NA        Hal 61
22           1_13                        4         NA     Corey 111
   Flowcell_Name_2 Flowcell_Lane_A Flowcell_Lane_B Flowcell_ID Total_Reads
21            <NA>               1               4   C27Y9ACXX    75878908
22            <NA>               4               5   C27VNACXX    79038866
   Mapped_Reads Genes_Detected Transcripts_Detected Percent_Aligned
21     72417683          28168               148984       0.9543849
22     77199735          29058               153568       0.9767313
   Intragenic_Rate Intronic_Rate Intergenic_Rate
21       0.8269516     0.4484509      0.17236637
22       0.9512340     0.2949439      0.04747318
   Expression_Profiling_Efficiency    rRNA_Rate libclust  RIN2       genoPC1
21                       0.3612353 0.0004665723        D 56.25 -0.0205963704
22                       0.6410191 0.0002741816        B 77.44 -0.0004623463
       genoPC2    genoPC3      genoPC4      genoPC5 log_depth log_Astro
21 -0.02205074 -0.0105337 -0.007387133 -0.004576622  6.410175 -1.049417
22 -0.01721824  0.3105687 -0.085514534  0.100494270  7.060691 -1.316441
     log_Inh log_Micro  log_Oligo   log_OPC
21 -1.608014 -2.765108 -0.6002363 -1.897502
22 -1.370664 -3.215771 -1.1485411 -2.496988
> 
> table(dat$gender, dat$Sex)
        
          XX  XY
  Female 211   0
  Male     0 316
> 
> mod0.terms = c("gender","Institution","libclust","age_death","PMI",
+                "RIN","RIN2", paste0("genoPC",1:5),"log_depth", 
+                colnames(plog))
> length(mod0.terms)
[1] 18
> 
> mod0.str = paste(mod0.terms, collapse = " + ")
> 
> # Looping over genes for lm() and residuals
> GG = nrow(trec); NN = ncol(trec)
> rr = matrix(NA,GG,NN) # residual matrix
> 
> for(gg in seq(GG)){
+   # gg = 1
+   if(gg %% 1e2 == 0) cat(".")
+   if(gg %% 2e3 == 0 || gg == GG) cat(sprintf("%s out of %s\n",gg,GG))
+   
+   trec.gg = trec[gg,]
+   
+   lm_out = lm(formula(sprintf("trec.gg ~ %s", mod0.str)), data = dat)
+   rr[gg,] = as.numeric(lm_out$residuals)
+   aa = drop1(lm_out,.~.,test="F")
+   
+   if(gg == 1){
+     pp = matrix(NA,GG,nrow(aa)-1)
+     colnames(pp) = rownames(aa)[-1]
+   }
+   
+   pp[gg,] = aa[-1,6]
+   rm(lm_out)
+ }
....................2000 out of 20788
....................4000 out of 20788
....................6000 out of 20788
....................8000 out of 20788
....................10000 out of 20788
....................12000 out of 20788
....................14000 out of 20788
....................16000 out of 20788
....................18000 out of 20788
....................20000 out of 20788
.......20788 out of 20788
> 
> pdf(file.path(cmc_dir,"figures/SCZ_expression_PCA_all_log_Prop.pdf"),
+     height = 8,width = 8)
> 
> show_pvalue_hist(mat_pvalues = pp, test_type0 = 3)
> 
> rr2 = rr - rowMeans(rr,na.rm = TRUE)
> cov_rr2 = t(rr2) %*% rr2 / nrow(rr2); pca_rr2 = eigen(cov_rr2)
> 
> show_screeplot(pca_rr2,main = "")
> par(mfrow = c(2,1),mar = c(4,4,1,1),oma = c(0,0,2,0))
> barplot(pca_rr2$values[3:21], names.arg =3:21, main = "", 
+         xlab = "Index", ylab = "Eigen-value")
> barplot(diff(-pca_rr2$values[3:22]), names.arg =3:21, main = "", 
+         xlab = "Index", ylab = "Eigen-value[i] - Eigen-value[i+1]")
> 
> num_pcs = 5; pcs = smart_df(pca_rr2$vectors[,1:num_pcs])
> names(pcs) = paste0("PC",seq(num_pcs))
> show_pc_color(pcs,submain = "")
> 
> dev.off()
null device 
          1 
> 
> # ----------------------------------------------------------------------
> # SVA
> # ----------------------------------------------------------------------
> 
> mod.terms = c("Dx", mod0.terms)
> length(mod.terms)
[1] 19
> 
> mod0 = model.matrix(as.formula(paste("~", paste(mod0.terms, collapse=" + "))), 
+                     data=dat)
> mod  = model.matrix(as.formula(paste("~", paste(mod.terms, collapse=" + "))), 
+                     data=dat)
> 
> dim(mod0)
[1] 527  26
> mod0[1:2,]
   (Intercept) genderMale InstitutionPenn InstitutionPitt libclustB
21           1          1               0               0         0
22           1          1               0               0         1
   libclustbase libclustC libclustD libclustE libclustF libclustG age_death
21            0         0         1         0         0         0        68
22            0         0         0         0         0         0        58
    PMI RIN  RIN2       genoPC1     genoPC2    genoPC3      genoPC4
21  8.9 7.5 56.25 -0.0205963704 -0.02205074 -0.0105337 -0.007387133
22 12.3 8.8 77.44 -0.0004623463 -0.01721824  0.3105687 -0.085514534
        genoPC5 log_depth log_Astro   log_Inh log_Micro  log_Oligo   log_OPC
21 -0.004576622  6.410175 -1.049417 -1.608014 -2.765108 -0.6002363 -1.897502
22  0.100494270  7.060691 -1.316441 -1.370664 -3.215771 -1.1485411 -2.496988
> 
> dim(mod)
[1] 527  27
> mod[1:2,]
   (Intercept) DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB
21           1     1          1               0               0         0
22           1     0          1               0               0         1
   libclustbase libclustC libclustD libclustE libclustF libclustG age_death
21            0         0         1         0         0         0        68
22            0         0         0         0         0         0        58
    PMI RIN  RIN2       genoPC1     genoPC2    genoPC3      genoPC4
21  8.9 7.5 56.25 -0.0205963704 -0.02205074 -0.0105337 -0.007387133
22 12.3 8.8 77.44 -0.0004623463 -0.01721824  0.3105687 -0.085514534
        genoPC5 log_depth log_Astro   log_Inh log_Micro  log_Oligo   log_OPC
21 -0.004576622  6.410175 -1.049417 -1.608014 -2.765108 -0.6002363 -1.897502
22  0.100494270  7.060691 -1.316441 -1.370664 -3.215771 -1.1485411 -2.496988
> 
> n.sv = num.sv(trec,mod,method="leek")
> n.sv
[1] 0
> 
> n.sv = num.sv(trec,mod,method="be")
> n.sv
[1] 47
> 
> sv5  = sva(trec, mod, mod0, n.sv=5)
Number of significant surrogate variables is:  5 
Iteration (out of 5 ):1  2  3  4  5  > sv12 = sva(trec, mod, mod0, n.sv=12)
Number of significant surrogate variables is:  12 
Iteration (out of 5 ):1  2  3  4  5  > 
> # ----------------------------------------------------------------------
> # check associatoin between PCs and svs
> # ----------------------------------------------------------------------
> 
> pcs = pca_rr2$vectors[,1:20]
> npc = 1:20
> round(cor(sv5$sv, pcs[,1:5]),2)
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,] -0.37  0.01  0.00  0.01  0.01
[2,] -0.03 -0.56 -0.03  0.00  0.02
[3,]  0.23  0.06 -0.03 -0.16 -0.06
[4,] -0.06  0.11  0.09  0.01  0.05
[5,]  0.18 -0.21  0.39  0.08 -0.05
> round(cor(sv5$sv, sv12$sv),2)
     [,1]  [,2]  [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12]
[1,]    1  0.00  0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.01  0.00     0
[2,]    0  1.00  0.00 0.01  0.01  0.00  0.00  0.00  0.00  0.01  0.00     0
[3,]    0  0.00  0.99 0.10  0.00 -0.01  0.00  0.01 -0.01  0.00  0.00     0
[4,]    0 -0.01 -0.10 0.99 -0.02 -0.01  0.00 -0.01  0.01 -0.01  0.01     0
[5,]    0 -0.01 -0.01 0.02  1.00 -0.05 -0.01  0.03  0.01  0.01  0.00     0
> 
> r2 = matrix(NA, nrow=12, ncol=length(npc))
> for(k in 1:12){
+   svk = sv12$sv[,k]
+   for(m in 1:length(npc)){
+     lmk = summary(lm(svk ~ pcs[,1:npc[m]]))
+     r2[k,m] = lmk$r.squared
+   }
+ }
> 
> round(r2, 2)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,] 0.14 0.14 0.14 0.14 0.14 0.14 0.14 0.14 0.14  0.14  0.14  0.14  0.14
 [2,] 0.00 0.32 0.32 0.32 0.32 0.32 0.32 0.32 0.32  0.32  0.32  0.32  0.32
 [3,] 0.05 0.06 0.06 0.08 0.09 0.11 0.11 0.12 0.12  0.12  0.12  0.13  0.13
 [4,] 0.00 0.01 0.02 0.02 0.03 0.03 0.03 0.04 0.04  0.04  0.04  0.04  0.04
 [5,] 0.03 0.08 0.26 0.27 0.27 0.28 0.29 0.29 0.30  0.32  0.32  0.33  0.33
 [6,] 0.01 0.02 0.29 0.63 0.64 0.64 0.64 0.65 0.65  0.66  0.66  0.66  0.66
 [7,] 0.01 0.02 0.13 0.17 0.34 0.34 0.34 0.34 0.36  0.39  0.39  0.40  0.41
 [8,] 0.00 0.00 0.10 0.34 0.67 0.71 0.73 0.73 0.75  0.76  0.76  0.76  0.76
 [9,] 0.01 0.04 0.05 0.06 0.17 0.43 0.45 0.45 0.52  0.53  0.53  0.53  0.53
[10,] 0.01 0.01 0.05 0.06 0.19 0.20 0.69 0.79 0.84  0.85  0.85  0.86  0.86
[11,] 0.04 0.06 0.06 0.08 0.10 0.20 0.38 0.39 0.46  0.50  0.51  0.57  0.57
[12,] 0.00 0.00 0.04 0.11 0.15 0.32 0.45 0.76 0.79  0.79  0.80  0.80  0.80
      [,14] [,15] [,16] [,17] [,18] [,19] [,20]
 [1,]  0.14  0.14  0.14  0.14  0.14  0.14  0.14
 [2,]  0.32  0.32  0.32  0.32  0.32  0.32  0.32
 [3,]  0.13  0.13  0.13  0.13  0.13  0.13  0.13
 [4,]  0.04  0.04  0.04  0.04  0.04  0.04  0.04
 [5,]  0.33  0.34  0.34  0.34  0.34  0.34  0.34
 [6,]  0.66  0.66  0.67  0.67  0.67  0.67  0.67
 [7,]  0.41  0.41  0.41  0.41  0.41  0.41  0.41
 [8,]  0.76  0.76  0.77  0.77  0.77  0.77  0.77
 [9,]  0.53  0.53  0.54  0.54  0.54  0.54  0.54
[10,]  0.86  0.86  0.87  0.87  0.87  0.87  0.87
[11,]  0.57  0.59  0.59  0.59  0.59  0.60  0.60
[12,]  0.80  0.81  0.81  0.81  0.81  0.81  0.81
> 
> pdf(file.path(cmc_dir,"figures/svs_vs_pcs.pdf"),
+     height = 6,width = 6)
> par(mar=c(5,4,1,1), bty="n")
> for(i in 1:nrow(r2)){
+   if(i==1){
+     plot(npc, r2[1,], ylim=c(0,0.85), type="l", xlim=c(0,21), 
+          xlab="# of PCs", ylab="R2 of surrogate variables explained by PCs")
+   }else{
+     lines(npc, r2[i,])
+   }
+ }
> abline(v=10, lty=2, col="darkred")
> abline(v=12, lty=2, col="darkred")
> abline(v=14, lty=2, col="darkred")
> text(rep(21,12), r2[,20], labels=1:12)
> dev.off()
null device 
          1 
> 
> # ----------------------------------------------------------------------
> # R squared vs. number of surrogate variables to use
> # ----------------------------------------------------------------------
> ctypes2use = which(colnames(prop) != "Exc")
> plog = log(prop[,ctypes2use] + 1e-5)
> plog = plog - log(prop[,which(colnames(prop) == "Exc")])
> colnames(plog) = paste("log", colnames(plog), sep="_")
> colnames(sv12$sv) = paste0("sv", 1:12)
> dat = cbind(cbind(dat, plog), sv12$sv)
> dim(dat)
[1] 527  84
> dat[1:2,]
   Individual_ID RNAseq_sample_id ATACSeq.Assay_Sample_ID Genotype_sample_id
21  CMC_MSSM_025   MSSM_RNA_PFC_1                  B223T1             MSSM_1
22  CMC_MSSM_026  MSSM_RNA_PFC_10                   B15T1            MSSM_10
   Individual.Notes Institution      Dx SCZ.Pair BP.Pair gender Sex Ethnicity
21             <NA>        MSSM     SCZ     <NA>    <NA>   Male  XY Caucasian
22             <NA>        MSSM Control     <NA>    <NA>   Male  XY  Hispanic
   brain_weight  PMI   pH autopsy_year age_death cause_death   height weight
21         1216  8.9 6.27         2002        68           1       NA     NA
22         1238 12.3 6.74         2003        58           1 65.00004    163
   Study Brain_Region Brodmann_Area Hemisphere Operator Date_Dissected
21   CMC        DLPFC             9       left   MS. LI         8/1/12
22   CMC        DLPFC             9       left   MS. LI         8/1/12
   RNA_Isolation_Batch RNA_Prep_Date RIN X28S.18S RNA_Prep_Operator
21                1_34       5/28/13 7.5      1.1   Jessica Johnson
22                1_13       4/29/13 8.8      2.7   Jessica Johnson
   Total_RNA_Yield X260.280 Ribozero_Batch Library_Batch Library_Barcode
21            10.7     2.10         1_12_2          1_12          CTAGCT
22            16.2     1.88          1_6_1           1_6          TGACCA
   Flowcell_Batch Flowcell_.Given_to_Core. Flowcell_2 Flowcell_Name
21           1_28                        7         NA        Hal 61
22           1_13                        4         NA     Corey 111
   Flowcell_Name_2 Flowcell_Lane_A Flowcell_Lane_B Flowcell_ID Total_Reads
21            <NA>               1               4   C27Y9ACXX    75878908
22            <NA>               4               5   C27VNACXX    79038866
   Mapped_Reads Genes_Detected Transcripts_Detected Percent_Aligned
21     72417683          28168               148984       0.9543849
22     77199735          29058               153568       0.9767313
   Intragenic_Rate Intronic_Rate Intergenic_Rate
21       0.8269516     0.4484509      0.17236637
22       0.9512340     0.2949439      0.04747318
   Expression_Profiling_Efficiency    rRNA_Rate libclust  RIN2       genoPC1
21                       0.3612353 0.0004665723        D 56.25 -0.0205963704
22                       0.6410191 0.0002741816        B 77.44 -0.0004623463
       genoPC2    genoPC3      genoPC4      genoPC5 log_depth log_Astro
21 -0.02205074 -0.0105337 -0.007387133 -0.004576622  6.410175 -1.049417
22 -0.01721824  0.3105687 -0.085514534  0.100494270  7.060691 -1.316441
     log_Inh log_Micro  log_Oligo   log_OPC log_Astro   log_Inh log_Micro
21 -1.608014 -2.765108 -0.6002363 -1.897502 -1.049417 -1.608014 -2.765108
22 -1.370664 -3.215771 -1.1485411 -2.496988 -1.316441 -1.370664 -3.215771
    log_Oligo   log_OPC         sv1        sv2        sv3         sv4
21 -0.6002363 -1.897502  0.02190947 0.01847692 0.03846765 -0.06969516
22 -1.1485411 -2.496988 -0.05526579 0.01286241 0.01747121 -0.04248974
          sv5         sv6        sv7         sv8        sv9        sv10
21 0.02062629 -0.01158661 0.07943795 -0.01843414 0.04296189 -0.05202259
22 0.07813083 -0.02817618 0.03528446  0.02497530 0.07654874  0.02101383
           sv11        sv12
21  0.003324254 -0.06636606
22 -0.021740136 -0.01473272
> log_trec = trec
> final.mod0.terms = mod0.terms
> final.mod0.str = paste(final.mod0.terms, collapse = " + ")
> max_number_of_SV = 12
> final.mod0.str.vector = rep(NA, max_number_of_SV + 1)
> final.mod0.str.vector[1] = final.mod0.str
> for (number_of_SV in (seq_len(max_number_of_SV))) {
+   final.mod0.str.vector[1 + number_of_SV] = sprintf("%s + sv%d", final.mod0.str.vector[number_of_SV], number_of_SV)
+ }
> 
> GG = nrow(log_trec); NN = ncol(log_trec)
> rr = matrix(NA,GG,NN) # residual matrix
> 
> rsquared = matrix(NA, nrow = GG, ncol = 1 + max_number_of_SV)
> for(gg in seq_len(GG)){
+   # gg = 1
+   if(gg %% 1e2 == 0) cat(".")
+   if(gg %% 2e3 == 0 || gg == GG) cat(sprintf("%s out of %s\n",gg,GG))
+   
+   log_trec.gg = log_trec[gg,]
+   
+   # starts from 0
+   for (number_of_SV in (-1 + seq_len(max_number_of_SV + 1))) {
+     lm_out = lm(formula(sprintf("log_trec.gg ~ %s", final.mod0.str.vector[1 + number_of_SV])), data = dat)
+     rsquared[gg, 1 + number_of_SV] = summary(lm_out)$r.squared
+     rm(lm_out)
+   }
+ }
....................2000 out of 20788
....................4000 out of 20788
....................6000 out of 20788
....................8000 out of 20788
....................10000 out of 20788
....................12000 out of 20788
....................14000 out of 20788
....................16000 out of 20788
....................18000 out of 20788
....................20000 out of 20788
.......20788 out of 20788
> colnames(rsquared) = paste0("SV",  -1 + seq_len(max_number_of_SV + 1))
> 
> saveRDS(rsquared, file.path(cmc_dir, "results/SCZ_rsquared.rds"))
> 
> colMedians(rsquared, na.rm=TRUE)
 [1] 0.5443745 0.5885174 0.6738598 0.6845764 0.6948805 0.7111689 0.7224931
 [8] 0.7340754 0.7480232 0.7544155 0.7640519 0.7706332 0.7793841
> colnames(rsquared) = sprintf("%s\n%.2f", paste0("SV",  -1 + seq_len(max_number_of_SV + 1)), colMedians(rsquared, na.rm=TRUE))
> 
> png(file.path(cmc_dir, "figures/SCZ_rsquared.png"),
+     width=9, height=6, units="in", res=400)
> par(mar = c(6.5, 3.0, 0.5, 1.0))
> boxplot(rsquared, sub = paste(strwrap(paste("log_trec ~", final.mod0.str), 110), collapse = "\n"))
> dev.off()
null device 
          1 
> 
> 
> # ----------------------------------------------------------------------
> # save results
> # ----------------------------------------------------------------------
> 
> mod[1:2,]
   (Intercept) DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB
21           1     1          1               0               0         0
22           1     0          1               0               0         1
   libclustbase libclustC libclustD libclustE libclustF libclustG age_death
21            0         0         1         0         0         0        68
22            0         0         0         0         0         0        58
    PMI RIN  RIN2       genoPC1     genoPC2    genoPC3      genoPC4
21  8.9 7.5 56.25 -0.0205963704 -0.02205074 -0.0105337 -0.007387133
22 12.3 8.8 77.44 -0.0004623463 -0.01721824  0.3105687 -0.085514534
        genoPC5 log_depth log_Astro   log_Inh log_Micro  log_Oligo   log_OPC
21 -0.004576622  6.410175 -1.049417 -1.608014 -2.765108 -0.6002363 -1.897502
22  0.100494270  7.060691 -1.316441 -1.370664 -3.215771 -1.1485411 -2.496988
> colnames(mod)
 [1] "(Intercept)"     "DxSCZ"           "genderMale"      "InstitutionPenn"
 [5] "InstitutionPitt" "libclustB"       "libclustbase"    "libclustC"      
 [9] "libclustD"       "libclustE"       "libclustF"       "libclustG"      
[13] "age_death"       "PMI"             "RIN"             "RIN2"           
[17] "genoPC1"         "genoPC2"         "genoPC3"         "genoPC4"        
[21] "genoPC5"         "log_depth"       "log_Astro"       "log_Inh"        
[25] "log_Micro"       "log_Oligo"       "log_OPC"        
> 
> modDat = cbind(mod[,2:22], sv12$sv)
> colnames(modDat)[22:33] = paste0("sv", 1:12)
> dim(modDat)
[1] 527  33
> modDat[1:2,]
   DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB libclustbase
21     1          1               0               0         0            0
22     0          1               0               0         1            0
   libclustC libclustD libclustE libclustF libclustG age_death  PMI RIN  RIN2
21         0         1         0         0         0        68  8.9 7.5 56.25
22         0         0         0         0         0        58 12.3 8.8 77.44
         genoPC1     genoPC2    genoPC3      genoPC4      genoPC5 log_depth
21 -0.0205963704 -0.02205074 -0.0105337 -0.007387133 -0.004576622  6.410175
22 -0.0004623463 -0.01721824  0.3105687 -0.085514534  0.100494270  7.060691
           sv1        sv2        sv3         sv4        sv5         sv6
21  0.02190947 0.01847692 0.03846765 -0.06969516 0.02062629 -0.01158661
22 -0.05526579 0.01286241 0.01747121 -0.04248974 0.07813083 -0.02817618
          sv7         sv8        sv9        sv10         sv11        sv12
21 0.07943795 -0.01843414 0.04296189 -0.05202259  0.003324254 -0.06636606
22 0.03528446  0.02497530 0.07654874  0.02101383 -0.021740136 -0.01473272
> 
> covariate.file.name = "data/dat_cavariates_scz_control_with_svs.rds"
> saveRDS(modDat, file=file.path(cmc_dir, covariate.file.name))
> 
> trec.file.name = "data/trec_filtered_log_rd_corrected_scz_control.rds"
> saveRDS(trec, file=file.path(cmc_dir, trec.file.name))
> 
> 
> trec0 = readRDS(file=file.path(cmc_dir, "data/trec_filtered.rds"))
> dim(trec0)
[1] 20788   582
> trec0[1:2,1:5]
                MSSM_RNA_BP_PFC_10 MSSM_RNA_BP_PFC_11 MSSM_RNA_BP_PFC_12
ENSG00000000003                103                258                148
ENSG00000000419                372                531                597
                MSSM_RNA_BP_PFC_13 MSSM_RNA_BP_PFC_14
ENSG00000000003                170                216
ENSG00000000419                522                890
> 
> table(dat$RNAseq_sample_id %in% colnames(trec0))

TRUE 
 527 
> trec0 = trec0[,match(dat$RNAseq_sample_id, colnames(trec0))]
> dim(trec0)
[1] 20788   527
> trec0[1:2,1:5]
                MSSM_RNA_PFC_1 MSSM_RNA_PFC_10 MSSM_RNA_PFC_100
ENSG00000000003            137             320              251
ENSG00000000419            416            1242              625
                MSSM_RNA_PFC_101 MSSM_RNA_PFC_102
ENSG00000000003              101              209
ENSG00000000419              366              701
> 
> trec0.file.name = "data/trec_filtered_scz_control.rds"
> saveRDS(trec0, file=file.path(cmc_dir, trec0.file.name))
> 
> # mem_used()
> gc()
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells  7517898 401.5   13823819  738.3  13823819  738.3
Vcells 67355064 513.9  185757268 1417.3 232196570 1771.6
> 
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS/LAPACK: /opt/intel/compilers_and_libraries_2018.2.199/linux/mkl/lib/intel64_lin/libmkl_rt.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] GenomicFeatures_1.36.4 AnnotationDbi_1.46.1   Biobase_2.44.0        
 [4] GenomicRanges_1.36.1   GenomeInfoDb_1.20.0    IRanges_2.18.2        
 [7] S4Vectors_0.22.1       BiocGenerics_0.30.0    matrixStats_0.55.0    
[10] sva_3.32.1             BiocParallel_1.18.1    genefilter_1.66.0     
[13] mgcv_1.8-29            nlme_3.1-141           data.table_1.12.2     

loaded via a namespace (and not attached):
 [1] SummarizedExperiment_1.14.1 progress_1.2.2             
 [3] splines_3.6.1               lattice_0.20-38            
 [5] vctrs_0.2.0                 rtracklayer_1.44.4         
 [7] blob_1.2.0                  survival_2.44-1.1          
 [9] XML_3.98-1.20               rlang_0.4.0                
[11] pillar_1.4.2                DBI_1.0.0                  
[13] bit64_0.9-7                 GenomeInfoDbData_1.2.1     
[15] stringr_1.4.0               zlibbioc_1.30.0            
[17] Biostrings_2.52.0           memoise_1.1.0              
[19] biomaRt_2.40.4              Rcpp_1.0.2                 
[21] xtable_1.8-4                backports_1.1.4            
[23] DelayedArray_0.10.0         limma_3.40.6               
[25] annotate_1.62.0             XVector_0.24.0             
[27] bit_1.1-14                  Rsamtools_2.0.1            
[29] hms_0.5.1                   digest_0.6.21              
[31] stringi_1.4.3               grid_3.6.1                 
[33] bitops_1.0-6                tools_3.6.1                
[35] magrittr_1.5                RCurl_1.95-4.12            
[37] tibble_2.1.3                RSQLite_2.1.2              
[39] crayon_1.3.4                pkgconfig_2.0.2            
[41] zeallot_0.1.0               Matrix_1.2-17              
[43] prettyunits_1.0.2           httr_1.4.1                 
[45] assertthat_0.2.1            R6_2.4.0                   
[47] GenomicAlignments_1.20.1    compiler_3.6.1             
> 
> 
> proc.time()
   user  system elapsed 
982.859   7.016 990.047 
