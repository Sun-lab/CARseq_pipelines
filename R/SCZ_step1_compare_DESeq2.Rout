
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # compare the results of DESeq2 with or without cell type proportion 
> # (log ratios) as covaraites
> 
> library(data.table)
> library(ggplot2)
> library(ggpubr)
> library(ggpointdensity)
> library(CARseq)
> library(DESeq2)
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min


Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:data.table’:

    first, second

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following object is masked from ‘package:data.table’:

    shift

Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: SummarizedExperiment
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum

> theme_set(theme_classic())
> library(SummarizedExperiment)
> library(foreach)
> library(doParallel)
Loading required package: iterators
> 
> # -------------------------------------------------------------------------
> # compare DESeq2 analysis results
> # -------------------------------------------------------------------------
> 
> res1 = fread("../results/SCZ_step1_DESeq2_bulk_adj_covariates_SV2.txt")
Warning message:
In fread("../results/SCZ_step1_DESeq2_bulk_adj_covariates_SV2.txt") :
  Detected 6 column names but the data has 7 columns (i.e. invalid file). Added 1 extra default column name for the first column which is guessed to be row names or an index. Use setnames() afterwards if this guess is not correct, or fix the file write command that created the file to create a valid file.
> 
> dim(res1)
[1] 20788     7
> res1[1:2,]
                V1 baseMean log2FoldChange      lfcSE       stat    pvalue
1: ENSG00000000003 209.0406    -0.02052869 0.03161959 -0.6492398 0.5161834
2: ENSG00000000419 662.0138    -0.02134647 0.01907524 -1.1190673 0.2631114
        padj
1: 0.8236430
2: 0.6403888
> 
> fnm2 = "SCZ_step1_DESeq2_bulk_adj_covariates_SV2_log_ct_fractions.txt"
> res2 = fread(file.path("../results", fnm2))
Warning message:
In fread(file.path("../results", fnm2)) :
  Detected 6 column names but the data has 7 columns (i.e. invalid file). Added 1 extra default column name for the first column which is guessed to be row names or an index. Use setnames() afterwards if this guess is not correct, or fix the file write command that created the file to create a valid file.
> 
> dim(res2)
[1] 20788     7
> res2[1:2,]
                V1 baseMean log2FoldChange      lfcSE       stat    pvalue
1: ENSG00000000003 209.0406    0.011718031 0.02706004  0.4330382 0.6649870
2: ENSG00000000419 662.0138   -0.009463919 0.01925412 -0.4915271 0.6230537
        padj
1: 0.8713649
2: 0.8485489
> 
> res1$qvalue = get_qvalues_one_inflated(res1$pvalue)
> res2$qvalue = get_qvalues_one_inflated(res2$pvalue)
> 
> table(res1$V1 == res2$V1)

 TRUE 
20788 
> 
> sort(res1$pvalue)[1:5]
[1] 3.123275e-17 9.837662e-11 1.318178e-10 3.929626e-10 1.761739e-09
> sort(res2$pvalue)[1:5]
[1] 4.482427e-16 1.125298e-09 1.780475e-09 4.271836e-09 2.167387e-08
> 
> sort(res1$qvalue)[1:5]
[1] 5.022851e-13 7.066313e-07 7.066313e-07 1.579906e-06 5.666457e-06
> sort(res2$qvalue)[1:5]
[1] 6.661784e-12 8.362087e-06 8.820473e-06 1.587201e-05 5.037585e-05
> 
> summary(res1$pvalue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1158  0.3587  0.4049  0.6714  0.9998 
> summary(res2$pvalue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.09273 0.32512 0.38320 0.64539 0.99995 
> 
> summary(res1$qvalue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.3582  0.5549  0.5080  0.6926  0.7734 
> summary(res2$qvalue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.2650  0.4649  0.4297  0.6152  0.7149 
> 
> res.df = merge(res1, res2, by="V1", suffixes = c(".noCT", ".wCT"))
> dim(res.df)
[1] 20788    15
> res.df[1:2,]
                V1 baseMean.noCT log2FoldChange.noCT lfcSE.noCT  stat.noCT
1: ENSG00000000003      209.0406         -0.02052869 0.03161959 -0.6492398
2: ENSG00000000419      662.0138         -0.02134647 0.01907524 -1.1190673
   pvalue.noCT padj.noCT qvalue.noCT baseMean.wCT log2FoldChange.wCT  lfcSE.wCT
1:   0.5161834 0.8236430   0.6371862     209.0406        0.011718031 0.02706004
2:   0.2631114 0.6403888   0.4954172     662.0138       -0.009463919 0.01925412
     stat.wCT pvalue.wCT  padj.wCT qvalue.wCT
1:  0.4330382  0.6649870 0.8713649  0.6229664
2: -0.4915271  0.6230537 0.8485489  0.6066545
> 
> cut1 = 1e-7
> res.df$qvalue.noCT[which(res.df$qvalue.noCT < cut1)] = cut1
> res.df$qvalue.wCT[which(res.df$qvalue.wCT < cut1)]   = cut1
> 
> g1 = ggplot(res.df, aes(x=-log10(qvalue.noCT),y=-log10(qvalue.wCT))) +
+   geom_pointdensity(size = 0.6) + scale_color_viridis_c() +
+   labs(x= "-log10(qvalue no CT adj.)", y= "-log10(qvalue with CT adj.)", 
+        title="SCZ vs. control") + xlim(0, 7) + ylim(0, 7) + 
+   geom_abline(intercept = 0, slope=1)
> 
> summary(res.df$log2FoldChange.noCT)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-0.703856 -0.024649  0.001819  0.004682  0.029587  1.668717 
> summary(res.df$log2FoldChange.wCT)
      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. 
-0.8041622 -0.0255862  0.0009601  0.0028864  0.0285890  1.5599015 
> 
> g2 = ggplot(res.df, aes(x=log2FoldChange.noCT,
+                         y=log2FoldChange.wCT)) +
+   geom_pointdensity(size = 0.6) + scale_color_viridis_c() +
+   labs(x= "log2 fc, no CT adj.", y= "log2 fc, with CT adj.)", 
+        title="SCZ vs. control") + 
+   geom_abline(intercept = 0, slope=1)
> 
> pdf("../figures/SCZ_DESeq2_compare_log10pval.pdf", width=4, height=3.2)
> print(g1)
> dev.off()
null device 
          1 
> 
> pdf("../figures/SCZ_DESeq2_compare_log2fc.pdf", width=4, height=3.2)
> print(g2)
> dev.off()
null device 
          1 
> 
> # -------------------------------------------------------------------------
> # read in gene expressio and clinical data
> # -------------------------------------------------------------------------
> 
> private_data = "../../CARseq_pipelines_private/data"
> trec = readRDS(file.path(private_data, "trec_filtered_scz_control.rds"))
> 
> fnm = "dat_cavariates_scz_control_with_svs.rds"
> clinical_variables_raw = readRDS(file.path(private_data, fnm))
> 
> dim(clinical_variables_raw)
[1] 527  33
> clinical_variables_raw[1:2,]
   DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB libclustbase
21     1          1               0               0         0            0
22     0          1               0               0         1            0
   libclustC libclustD libclustE libclustF libclustG age_death  PMI RIN  RIN2
21         0         1         0         0         0        68  8.9 7.5 56.25
22         0         0         0         0         0        58 12.3 8.8 77.44
         genoPC1     genoPC2    genoPC3      genoPC4      genoPC5 log_depth
21 -0.0205963704 -0.02205074 -0.0105337 -0.007387133 -0.004576622  6.410175
22 -0.0004623463 -0.01721824  0.3105687 -0.085514534  0.100494270  7.060691
           sv1        sv2        sv3         sv4        sv5         sv6
21  0.02190947 0.01847692 0.03846765 -0.06969516 0.02062629 -0.01158661
22 -0.05526579 0.01286241 0.01747121 -0.04248974 0.07813083 -0.02817618
          sv7         sv8        sv9        sv10         sv11        sv12
21 0.07943795 -0.01843414 0.04296189 -0.05202259  0.003324254 -0.06636606
22 0.03528446  0.02497530 0.07654874  0.02101383 -0.021740136 -0.01473272
> 
> # for code compatibility:
> col_data    = as.data.frame(clinical_variables_raw)
> col_data$Dx = ifelse(col_data$DxSCZ == 1, "SCZ", "Control")
> col_data$RNAseq.Sample_RNA_ID = colnames(trec)
> 
> # rescale age_death, PMI, RIN, RIN^2, log_depth
> col_data$scaled_age_death = scale(col_data$age_death)
> col_data$scaled_log_depth = scale(col_data$log_depth)
> col_data$scaled_PMI  = scale(col_data$PMI)
> col_data$scaled_RIN  = scale(col_data$RIN)
> col_data$scaled_RIN2 = scale(col_data$RIN2)
> 
> # rescale PCs and SVs -- the names are still sv1, sv2, etc, 
> # but they have been scaled:
> covariates_to_scale = grep("sv|PC", colnames(col_data))
> for (m in covariates_to_scale) {
+   col_data[, m] = scale(col_data[, m])
+ }
> 
> # cellular proportions
> prop_output_file = "../data/SCZ_prop.rds"
> prop_list = readRDS(prop_output_file)
> names(prop_list)
[1] "ICeDT"     "CIBERSORT"
> 
> icedt_rho    = prop_list$ICeDT
> match_sample = match(col_data$RNAseq.Sample_RNA_ID, rownames(icedt_rho))
> icedt_rho    = icedt_rho[match_sample,]
> 
> dim(icedt_rho)
[1] 527   6
> icedt_rho[1:2,]
                    Astro       Exc        Inh      Micro     Oligo        OPC
MSSM_RNA_PFC_1  0.1514417 0.4325437 0.08662203 0.02722698 0.2373189 0.06484674
MSSM_RNA_PFC_10 0.1366660 0.5098181 0.12945229 0.02044615 0.1616528 0.04196468
> 
> rownames(col_data) = col_data$RNAseq.Sample_RNA_ID
> table(rownames(col_data) == rownames(icedt_rho))

TRUE 
 527 
> 
> for(i in 1:ncol(col_data)){
+   if(is.character(col_data[[i]])){
+     col_data[[i]] = as.factor(col_data[[i]])
+   }
+ }
> 
> ctypes2use = which(colnames(icedt_rho) != "Exc")
> plog = log(icedt_rho[,ctypes2use] + 0.01)
> plog = plog - log(icedt_rho[,which(colnames(icedt_rho) == "Exc")])
> colnames(plog) = paste("log", colnames(plog), sep="_")
> 
> col_data = cbind(col_data, plog)
> dim(col_data)
[1] 527  45
> col_data[1:2,c(1:6,(ncol(col_data)-6):ncol(col_data))]
                DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB
MSSM_RNA_PFC_1      1          1               0               0         0
MSSM_RNA_PFC_10     0          1               0               0         1
                libclustbase scaled_RIN scaled_RIN2  log_Astro   log_Inh
MSSM_RNA_PFC_1             0 -0.1415429  -0.2018291 -0.9855394 -1.498876
MSSM_RNA_PFC_10            0  1.3254924   1.3934458 -1.2458964 -1.296331
                log_Micro  log_Oligo   log_OPC
MSSM_RNA_PFC_1  -2.452650 -0.5590047 -1.754241
MSSM_RNA_PFC_10 -2.818095 -1.0885800 -2.283490
> 
> col_data$Diagnosis = col_data$Dx
> 
> # ------------------------------------------------------------------------
> # run linear regression, estimate the R2 by all the covariates 
> # with or without cell type proportions
> # ------------------------------------------------------------------------
> 
> rd = colSums(trec)
> summary(rd)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
10432709 16733633 20256645 21414903 24758802 71104884 
> rd = rd/median(rd)
> summary(rd)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.5150  0.8261  1.0000  1.0572  1.2223  3.5102 
> 
> log_trec = log(t(t(trec + 1)/rd))
> dim(log_trec)
[1] 20788   527
> log_trec[1:2,1:5]
                MSSM_RNA_PFC_1 MSSM_RNA_PFC_10 MSSM_RNA_PFC_100
ENSG00000000003       5.247446        5.486073         5.277723
ENSG00000000419       6.353278        6.839915         6.187644
                MSSM_RNA_PFC_101 MSSM_RNA_PFC_102
ENSG00000000003         5.030846         5.462210
ENSG00000000419         6.311235         6.669036
> 
> R2s = matrix(NA, nrow=nrow(trec), ncol=2)
> 
> nCore = 15
> 
> registerDoParallel(cores=nCore)
> options(mc.cores=nCore)
> 
> R2s = foreach(i = 1:nrow(trec), .combine = "rbind") %dopar% {
+   y   = log_trec[i,]
+   
+   lm0 = lm(y ~ scaled_log_depth + InstitutionPenn + InstitutionPitt + 
+              genderMale + scaled_age_death + scaled_PMI + scaled_RIN + 
+              scaled_RIN2 + genoPC1 + genoPC2 + libclustB + 
+              libclustbase + libclustC + libclustD + libclustE + 
+              libclustF + libclustG + sv1 + sv2 + Diagnosis, 
+            data=col_data)
+ 
+   lm1 = lm(y ~ scaled_log_depth + InstitutionPenn + InstitutionPitt + 
+              genderMale + scaled_age_death + scaled_PMI + scaled_RIN + 
+              scaled_RIN2 + genoPC1 + genoPC2 + libclustB + 
+              libclustbase + libclustC + libclustD + libclustE + 
+              libclustF + libclustG + sv1 + sv2 + Diagnosis + 
+              log_Astro + log_Inh + log_Micro + log_Oligo + log_OPC, 
+            data=col_data)
+   
+   a1 = anova(lm0, lm1)
+   s0 = summary(lm0)
+   s1 = summary(lm1)
+   
+   c(s0$r.squared, s1$r.squared, a1$`Pr(>F)`[2])
+ }
> 
> dim(R2s)
[1] 20788     3
> R2s[1:2,]
              [,1]      [,2]         [,3]
result.1 0.2668152 0.5097497 9.487366e-42
result.2 0.8325464 0.8383022 3.527809e-03
> 
> R2s = as.data.frame(R2s)
> rownames(R2s) = rownames(trec)
> names(R2s) = c("R2_no_ct", "R2_with_ct", "pval")
> table(rownames(R2s) == res.df$V1)

 TRUE 
20788 
> 
> g2 = ggplot(R2s, aes(x=R2_no_ct, y=R2_with_ct)) +
+   geom_pointdensity(size = 0.6) + scale_color_viridis_c() +
+   labs(x= "R2, no CT adj.", y= "R2, with CT adj.") + 
+   geom_abline(intercept = 0, slope=1)
> 
> pdf("../figures/SCZ_DESeq2_compare_R2_with_or_without_log_ct_prop.pdf", 
+     width=4, height=3.2)
> print(g2)
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------------
> # check the association between ct-R2 and wether the gene expression
> # is assocaited with case/control status with/without ct correction
> # ------------------------------------------------------------------------
> 
> table(res.df$qvalue.noCT < 0.1)

FALSE  TRUE 
19779  1009 
> table(res.df$qvalue.wCT  < 0.1)

FALSE  TRUE 
18900  1888 
> 
> table(res.df$qvalue.noCT < 0.2)

FALSE  TRUE 
18321  2467 
> table(res.df$qvalue.wCT  < 0.2)

FALSE  TRUE 
16990  3798 
> 
> summary(R2s)
    R2_no_ct         R2_with_ct           pval         
 Min.   :0.03593   Min.   :0.04554   Min.   :0.000000  
 1st Qu.:0.41024   1st Qu.:0.52261   1st Qu.:0.000000  
 Median :0.59188   Median :0.67737   Median :0.000000  
 Mean   :0.56765   Mean   :0.64236   Mean   :0.022179  
 3rd Qu.:0.73772   3rd Qu.:0.78766   3rd Qu.:0.000048  
 Max.   :0.96827   Max.   :0.97180   Max.   :0.999906  
> table(R2s$pval < 0.05/nrow(R2s))

FALSE  TRUE 
 6419 14369 
> 
> table(res.df$qvalue.noCT < 0.1, res.df$qvalue.wCT < 0.1)
       
        FALSE  TRUE
  FALSE 18701  1078
  TRUE    199   810
> table(res.df$qvalue.noCT < 0.2, res.df$qvalue.wCT < 0.2)
       
        FALSE  TRUE
  FALSE 16580  1741
  TRUE    410  2057
> 
> stats = list()
> qcuts = c(0.1, 0.2)
> 
> for(k in 1:length(qcuts)){
+   qcut = qcuts[k]
+   w00 = res.df$qvalue.noCT >= qcut & res.df$qvalue.wCT >= qcut
+   w10 = res.df$qvalue.noCT < qcut  & res.df$qvalue.wCT >= qcut
+   w01 = res.df$qvalue.noCT >= qcut & res.df$qvalue.wCT < qcut
+   w11 = res.df$qvalue.noCT < qcut  & res.df$qvalue.wCT < qcut
+   
+   f00 = fisher.test(R2s$pval < 0.05/nrow(R2s), w00)
+   f10 = fisher.test(R2s$pval < 0.05/nrow(R2s), w10)
+   f01 = fisher.test(R2s$pval < 0.05/nrow(R2s), w01)
+   f11 = fisher.test(R2s$pval < 0.05/nrow(R2s), w11)
+   
+   stat1 = c(f00$estimate, f00$conf.int, f00$p.value)
+   stat1 = rbind(stat1, c(f10$estimate, f10$conf.int, f10$p.value))
+   stat1 = rbind(stat1, c(f01$estimate, f01$conf.int, f01$p.value))
+   stat1 = rbind(stat1, c(f11$estimate, f11$conf.int, f11$p.value))
+   
+   stats[[k]] = stat1 
+ }
> 
> stats
[[1]]
      odds ratio                                 
stat1  0.6437553 0.5775281 0.7166126 7.462123e-17
       1.9027701 1.3273157 2.7896323 2.010570e-04
       1.8662684 1.5994902 2.1850130 4.161319e-17
       1.1318344 0.9668915 1.3283578 1.208684e-01

[[2]]
      odds ratio                                 
stat1  0.6836149 0.6321735 0.7389113 8.926134e-23
       2.1980901 1.6919218 2.8901953 1.846635e-10
       1.9018004 1.6821984 2.1546742 1.565007e-27
       1.0235322 0.9263547 1.1318182 6.510053e-01

> 
> table(R2s$pval < 0.05/nrow(R2s))

FALSE  TRUE 
 6419 14369 
> 
> qcut = 0.1
> 
> w00 = res.df$qvalue.noCT >= qcut & res.df$qvalue.wCT >= qcut
> c1 = chisq.test(R2s$pval < 0.05/nrow(R2s), w00)
> c1$expected/rowSums(c1$observed)
                         w00
R2s$pval < 0.05/nrow(R2s)     FALSE      TRUE
                    FALSE 0.1003945 0.8996055
                    TRUE  0.1003945 0.8996055
> c1$observed/rowSums(c1$observed)
                         w00
R2s$pval < 0.05/nrow(R2s)      FALSE       TRUE
                    FALSE 0.07493379 0.92506621
                    TRUE  0.11176839 0.88823161
> 
> w10 = res.df$qvalue.noCT < qcut & res.df$qvalue.wCT >= qcut
> c1 = chisq.test(R2s$pval < 0.05/nrow(R2s), w10)
> c1$expected/rowSums(c1$observed)
                         w10
R2s$pval < 0.05/nrow(R2s)     FALSE       TRUE
                    FALSE 0.9904272 0.00957283
                    TRUE  0.9904272 0.00957283
> c1$observed/rowSums(c1$observed)
                         w10
R2s$pval < 0.05/nrow(R2s)       FALSE        TRUE
                    FALSE 0.994080075 0.005919925
                    TRUE  0.988795323 0.011204677
> 
> w01 = res.df$qvalue.noCT >= qcut & res.df$qvalue.wCT < qcut
> c1 = chisq.test(R2s$pval < 0.05/nrow(R2s), w01)
> c1$expected/rowSums(c1$observed)
                         w01
R2s$pval < 0.05/nrow(R2s)     FALSE       TRUE
                    FALSE 0.9481432 0.05185684
                    TRUE  0.9481432 0.05185684
> c1$observed/rowSums(c1$observed)
                         w01
R2s$pval < 0.05/nrow(R2s)      FALSE       TRUE
                    FALSE 0.96681726 0.03318274
                    TRUE  0.93980096 0.06019904
> 
> w11 = res.df$qvalue.noCT < qcut & res.df$qvalue.wCT < qcut
> c1 = chisq.test(R2s$pval < 0.05/nrow(R2s), w11)
> c1$expected/rowSums(c1$observed)
                         w11
R2s$pval < 0.05/nrow(R2s)     FALSE       TRUE
                    FALSE 0.9610352 0.03896479
                    TRUE  0.9610352 0.03896479
> c1$observed/rowSums(c1$observed)
                         w11
R2s$pval < 0.05/nrow(R2s)      FALSE       TRUE
                    FALSE 0.96416887 0.03583113
                    TRUE  0.95963533 0.04036467
> 
> # ------------------------------------------------------------------------
> # plot the odds ratio
> # ------------------------------------------------------------------------
> 
> grp = c("q < 0.1 with or w/o accounting for\n cell type (ct) proportion (prop.)", 
+         "q < 0.1 with ct prop. and \nq >= 0.1 w/o ct prop.", 
+         "q >= 0.1 with ct prop. and \nq < 0.1 w/o ct prop. ", 
+         "q < 0.1 with or w/o ct prop.")
> yAxis = length(grp):1
> 
> df_or = data.frame(group = grp, yAxis = yAxis, OR = stats[[1]][,1], 
+                    CI_low = stats[[1]][,2], CI_high = stats[[1]][,3], 
+                    pval = paste0("p = ", signif(stats[[1]][,4],2)))
> 
> p1 = ggplot(df_or, aes(x = OR, y = yAxis, label= pval)) + 
+   geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
+   geom_errorbarh(aes(xmax = CI_high, xmin = CI_low), size = .5, 
+                  height = .2, color = "gray50") +
+   geom_point(size = 3.5, color = "orange") +
+   theme(panel.grid.minor = element_blank()) +
+   scale_y_continuous(breaks = yAxis, labels = grp) + ylab("") + 
+   xlab("Odds Ratio") + theme_bw() + 
+   ggtitle("SCZ association vs. cell type prop. association") +
+   geom_text(nudge_x = 0.15, nudge_y = - 0.2)
> 
> pdf("../figures/SCZ_DESeq2_qval_vs_log_ct_association.pdf", 
+     width=6, height=2.5)
> print(p1)
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------------
> # Compare the significance level for different groups of genes
> # ------------------------------------------------------------------------
> 
> R2s$R2_diff = R2s$R2_with_ct - R2s$R2_no_ct
> R2s$grp = R2s$group = rep(NA, nrow(R2s))
> R2s$grp[w01] = "01"
> R2s$grp[w10] = "10"
> R2s$grp[w11] = "11"
> 
> R2s$group[(w00 | w01)] = "q >= 0.1"
> R2s$group[(w10 | w11)] = "q < 0.1"
> 
> res.df$grp   = R2s$grp
> res.df$group = R2s$group
> 
> ttl = "while accounting for cell type prop."
> g1 = ggplot(subset(res.df, grp %in% c("01", "11")), 
+             aes(x=-log10(qvalue.wCT), color=group)) + 
+   geom_density() + theme(legend.position=c(0.55,0.8)) + xlim(1,5) + 
+   xlab("-log10(qvalue for ASD association \n given cell type prop.)") + 
+   ggtitle(paste0("SCZ-associated genes (q < 0.1) \n ", ttl)) + 
+   labs(color = "q-value without accounting \n for cell type prop.")
> 
> pdf("../figures/SCZ_DESeq2_qval_density.pdf", 
+     width=4, height=3.5)
> print(g1)
Warning message:
Removed 3 rows containing non-finite values (stat_density). 
> dev.off()
null device 
          1 
> 
> # -------------------------------------------------------------------------
> # Re-run DESeq2 given log transformed cell type composition of Exc
> # -------------------------------------------------------------------------
> 
> dim(trec)
[1] 20788   527
> trec[1:2,1:3]
                MSSM_RNA_PFC_1 MSSM_RNA_PFC_10 MSSM_RNA_PFC_100
ENSG00000000003            137             320              251
ENSG00000000419            416            1242              625
> 
> col_data = cbind(col_data, log(icedt_rho + 0.01))
> 
> dim(col_data)
[1] 527  52
> col_data[1:2,]
                DxSCZ genderMale InstitutionPenn InstitutionPitt libclustB
MSSM_RNA_PFC_1      1          1               0               0         0
MSSM_RNA_PFC_10     0          1               0               0         1
                libclustbase libclustC libclustD libclustE libclustF libclustG
MSSM_RNA_PFC_1             0         0         1         0         0         0
MSSM_RNA_PFC_10            0         0         0         0         0         0
                age_death  PMI RIN  RIN2     genoPC1    genoPC2   genoPC3
MSSM_RNA_PFC_1         68  8.9 7.5 56.25 -0.51847948 -0.5669974 -0.262247
MSSM_RNA_PFC_10        58 12.3 8.8 77.44 -0.04633365 -0.4532353  7.121997
                   genoPC4    genoPC5 log_depth        sv1       sv2       sv3
MSSM_RNA_PFC_1  -0.1620197 -0.1055038  6.410175  0.5024869 0.4237625 0.8822436
MSSM_RNA_PFC_10 -1.9835294  2.3647695  7.060691 -1.2675038 0.2949954 0.4006968
                      sv4       sv5        sv6       sv7        sv8       sv9
MSSM_RNA_PFC_1  -1.598437 0.4730576 -0.2657353 1.8218847 -0.4227813 0.9853177
MSSM_RNA_PFC_10 -0.974489 1.7919062 -0.6462121 0.8092381  0.5728009 1.7556215
                      sv10        sv11       sv12      Dx RNAseq.Sample_RNA_ID
MSSM_RNA_PFC_1  -1.1931219  0.07624073 -1.5220850     SCZ       MSSM_RNA_PFC_1
MSSM_RNA_PFC_10  0.4819456 -0.49860328 -0.3378905 Control      MSSM_RNA_PFC_10
                scaled_age_death scaled_log_depth scaled_PMI scaled_RIN
MSSM_RNA_PFC_1        0.06665347        -1.094184 -0.6978798 -0.1415429
MSSM_RNA_PFC_10      -0.48739037         1.322181 -0.4003918  1.3254924
                scaled_RIN2  log_Astro   log_Inh log_Micro  log_Oligo   log_OPC
MSSM_RNA_PFC_1   -0.2018291 -0.9855394 -1.498876 -2.452650 -0.5590047 -1.754241
MSSM_RNA_PFC_10   1.3934458 -1.2458964 -1.296331 -2.818095 -1.0885800 -2.283490
                Diagnosis     Astro        Exc       Inh     Micro     Oligo
MSSM_RNA_PFC_1        SCZ -1.823611 -0.8152161 -2.336948 -3.290722 -1.397077
MSSM_RNA_PFC_10   Control -1.919598 -0.6542763 -1.970033 -3.491796 -1.762281
                      OPC
MSSM_RNA_PFC_1  -2.592313
MSSM_RNA_PFC_10 -2.957191
> 
> dd3 = DESeqDataSetFromMatrix(countData = trec, 
+                              colData = col_data,
+                              design = ~ scaled_log_depth + InstitutionPenn + 
+                                InstitutionPitt + genderMale + scaled_age_death + 
+                                scaled_PMI + scaled_RIN + scaled_RIN2 +
+                                genoPC1 + genoPC2 + libclustB + libclustbase + 
+                                libclustC + libclustD + libclustE + libclustF + 
+                                libclustG + Exc + sv1 + sv2 + Diagnosis)
  the design formula contains a numeric variable with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
> date()
[1] "Tue Dec 15 00:52:06 2020"
> dd3 = DESeq(dd3, parallel=TRUE)
estimating size factors
estimating dispersions
gene-wise dispersion estimates: 15 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 15 workers
> date()
[1] "Tue Dec 15 01:48:07 2020"
> 
> res3 = results(dd3)
> dim(res3)
[1] 20788     6
> res3[1:2,]
log2 fold change (MLE): Diagnosis SCZ vs Control 
Wald test p-value: Diagnosis SCZ vs Control 
DataFrame with 2 rows and 6 columns
                        baseMean     log2FoldChange              lfcSE
                       <numeric>          <numeric>          <numeric>
ENSG00000000003 209.040585742587 -0.022568050435334 0.0288927765984443
ENSG00000000419 662.013774163891  -0.02222450583342 0.0190925454570818
                              stat            pvalue              padj
                         <numeric>         <numeric>         <numeric>
ENSG00000000003 -0.781096630101972 0.434745663778212 0.745533759906599
ENSG00000000419   -1.1640410066525 0.244407394027271 0.589747610047973
> 
> res3 = as.data.frame(res3)
> 
> res3$qvalue = get_qvalues_one_inflated(res3$pvalue)
> table(rownames(res3) == res2$V1)

 TRUE 
20788 
> 
> # -------------------------------------------------------------------------
> # Re-run DESeq2 given log transformed cell type composition of Inh
> # -------------------------------------------------------------------------
> 
> dd4 = DESeqDataSetFromMatrix(countData = trec, 
+                              colData = col_data,
+                              design = ~ scaled_log_depth + InstitutionPenn + 
+                                InstitutionPitt + genderMale + scaled_age_death + 
+                                scaled_PMI + scaled_RIN + scaled_RIN2 +
+                                genoPC1 + genoPC2 + libclustB + libclustbase + 
+                                libclustC + libclustD + libclustE + libclustF + 
+                                libclustG + Inh + sv1 + sv2 + Diagnosis)
  the design formula contains a numeric variable with integer values,
  specifying a model with increasing fold change for higher values.
  did you mean for this to be a factor? if so, first convert
  this variable to a factor using the factor() function
> date()
[1] "Tue Dec 15 01:48:08 2020"
> dd4 = DESeq(dd4, parallel=TRUE)
estimating size factors
estimating dispersions
gene-wise dispersion estimates: 15 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 15 workers
> date()
[1] "Tue Dec 15 02:39:15 2020"
> 
> res4 = results(dd4)
> dim(res4)
[1] 20788     6
> res4[1:2,]
log2 fold change (MLE): Diagnosis SCZ vs Control 
Wald test p-value: Diagnosis SCZ vs Control 
DataFrame with 2 rows and 6 columns
                        baseMean      log2FoldChange              lfcSE
                       <numeric>           <numeric>          <numeric>
ENSG00000000003 209.040585742587  0.0309341968624571 0.0298941417161885
ENSG00000000419 662.013774163891 -0.0105979999860521 0.0191634654870863
                              stat            pvalue              padj
                         <numeric>         <numeric>         <numeric>
ENSG00000000003   1.03479126967895  0.30076640094761 0.562744372700487
ENSG00000000419 -0.553031495957441 0.580241843377849 0.785035303621134
> 
> res4 = as.data.frame(res4)
> 
> res4$qvalue = get_qvalues_one_inflated(res4$pvalue)
> table(rownames(res4) == res2$V1)

 TRUE 
20788 
> 
> table(res1$qvalue < 0.1)

FALSE  TRUE 
19779  1009 
> table(res2$qvalue < 0.1)

FALSE  TRUE 
18900  1888 
> table(res3$qvalue < 0.1)

FALSE  TRUE 
19222  1566 
> table(res4$qvalue < 0.1)

FALSE  TRUE 
17022  3766 
> 
> table(res1$qvalue < 0.05, res2$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 19778   540
  TRUE     87   383
> table(res1$qvalue < 0.05, res3$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 20073   245
  TRUE      2   468
> table(res1$qvalue < 0.05, res4$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 18393  1925
  TRUE     59   411
> table(res2$qvalue < 0.05, res3$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 19612   253
  TRUE    463   460
> table(res2$qvalue < 0.05, res4$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 18343  1522
  TRUE    109   814
> table(res3$qvalue < 0.05, res4$qvalue < 0.05)
       
        FALSE  TRUE
  FALSE 18227  1848
  TRUE    225   488
> 
> fnm = "../results/SCZ_step1_DESeq2_bulk_adj_covariates_SV2_log_Exc.txt"
> write.table(res3, file=fnm, quote = FALSE, sep = "\t", 
+             row.names = TRUE, col.names = TRUE)
> 
> fnm = "../results/SCZ_step1_DESeq2_bulk_adj_covariates_SV2_log_Inh.txt"
> write.table(res4, file=fnm, quote = FALSE, sep = "\t", 
+             row.names = TRUE, col.names = TRUE)
> 
> gc()
            used  (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   5958278 318.3   10871448  580.6         NA  10871448  580.6
Vcells 109722877 837.2  197512696 1507.0      32768 197512695 1507.0
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] doParallel_1.0.15           iterators_1.0.12           
 [3] foreach_1.4.7               DESeq2_1.24.0              
 [5] SummarizedExperiment_1.14.1 DelayedArray_0.10.0        
 [7] BiocParallel_1.18.1         matrixStats_0.55.0         
 [9] Biobase_2.44.0              GenomicRanges_1.36.1       
[11] GenomeInfoDb_1.20.0         IRanges_2.18.3             
[13] S4Vectors_0.22.1            BiocGenerics_0.30.0        
[15] CARseq_0.0.0.9007           ggpointdensity_0.1.0       
[17] ggpubr_0.4.0.999            ggplot2_3.3.1              
[19] data.table_1.12.8          

loaded via a namespace (and not attached):
 [1] colorspace_1.4-1       ggsignif_0.6.0         ellipsis_0.3.0        
 [4] rio_0.5.16             htmlTable_1.13.3       XVector_0.24.0        
 [7] base64enc_0.1-3        rstudioapi_0.11        farver_2.0.3          
[10] bit64_0.9-7            AnnotationDbi_1.46.1   codetools_0.2-16      
[13] splines_3.6.2          geneplotter_1.62.0     knitr_1.28            
[16] Formula_1.2-3          nloptr_1.2.1           doMC_1.3.6            
[19] broom_0.5.6            annotate_1.62.0        cluster_2.1.0         
[22] png_0.1-7              compiler_3.6.2         backports_1.1.5       
[25] assertthat_0.2.1       Matrix_1.2-18          acepack_1.4.1         
[28] htmltools_0.4.0        tools_3.6.2            gtable_0.3.0          
[31] glue_1.3.1             GenomeInfoDbData_1.2.1 dplyr_0.8.4           
[34] Rcpp_1.0.3             carData_3.0-4          cellranger_1.1.0      
[37] vctrs_0.3.0            nlme_3.1-144           xfun_0.12             
[40] stringr_1.4.0          openxlsx_4.1.5         lifecycle_0.2.0       
[43] rstatix_0.6.0          XML_3.99-0.3           scam_1.2-6            
[46] zlibbioc_1.30.0        MASS_7.3-51.5          scales_1.1.0          
[49] hms_0.5.3              RColorBrewer_1.1-2     curl_4.3              
[52] memoise_1.1.0          gridExtra_2.3          rpart_4.1-15          
[55] latticeExtra_0.6-29    stringi_1.4.5          RSQLite_2.2.0         
[58] genefilter_1.66.0      zetadiv_1.1.1          checkmate_2.0.0       
[61] zip_2.0.4              bvls_1.4               rlang_0.4.6           
[64] pkgconfig_2.0.3        bitops_1.0-6           lattice_0.20-38       
[67] purrr_0.3.3            labeling_0.3           htmlwidgets_1.5.1     
[70] bit_1.1-15.2           tidyselect_1.0.0       magrittr_1.5          
[73] R6_2.4.1               generics_0.0.2         Hmisc_4.4-0           
[76] DBI_1.1.0              pillar_1.4.3           haven_2.3.0           
[79] foreign_0.8-75         withr_2.1.2            mgcv_1.8-31           
[82] survival_3.1-8         abind_1.4-5            RCurl_1.98-1.1        
[85] nnet_7.3-12            tibble_3.0.1           crayon_1.3.4          
[88] car_3.0-8              jpeg_0.1-8.1           locfit_1.5-9.4        
[91] grid_3.6.2             readxl_1.3.1           blob_1.2.1            
[94] forcats_0.5.0          digest_0.6.23          xtable_1.8-4          
[97] tidyr_1.0.2            munsell_0.5.0          viridisLite_0.3.0     
> q(save="no")
> proc.time()
     user    system   elapsed 
92118.555   982.035  6470.719 
